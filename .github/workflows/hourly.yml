name: Hourly Poster

on:
  schedule:
    - cron: "0 * * * *"  # UTCで毎時00分実行
  workflow_dispatch: {}

permissions:
  contents: write  # state.json をコミットするため

# ★ 同時実行を禁止して重複投稿を防止
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ★ 開始時に最新を取り込み（state.jsonの取りこぼし防止）
      - name: Sync with remote
        run: |
          git fetch origin "${BRANCH_NAME}"
          git pull --rebase origin "${BRANCH_NAME}" || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: |
          python -m playwright install --with-deps chromium

      - name: Run bot
        env:
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}
          # --- ここからコミュニティ関連 ---
          # コミュニティID（必須: コミュニティ投稿する場合）
          X_COMMUNITY_ID: ${{ secrets.X_COMMUNITY_ID }}
          # フォロワーに共有しない場合は "false"（未設定時は false）
          X_SHARE_WITH_FOLLOWERS: ${{ vars.X_SHARE_WITH_FOLLOWERS }}
          # --- ここまでコミュニティ関連 ---
          # 画面スクレイピングのためのユーザー名（@なし）。Secrets/Variablesどちらでも可。
          X_SCREEN_NAME: ${{ vars.X_SCREEN_NAME }}
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        run: |
          python bot.py

      # ★ 未追跡のノイズでrebaseが止まらないように「state.jsonだけ退避→クリーン→pull→戻す」で確実にpush
      - name: Commit state
        if: always()
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -e

          if [[ ! -f "state.json" ]]; then
            echo "state.json not found; skip."
            exit 0
          fi

          # 変更が無ければ終了
          if git diff --quiet -- state.json; then
            echo "state.json unchanged; skip commit."
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # ---- 重要：state.json を退避し、作業ツリーをクリーンに ----
          cp state.json /tmp/state.json.saved
          git reset --hard
          git clean -fdx

          # 最新に追従
          git fetch origin "${BRANCH_NAME}"
          git checkout "${BRANCH_NAME}"
          git pull --rebase origin "${BRANCH_NAME}" || true

          # 退避していた state.json を戻す
          cp /tmp/state.json.saved state.json

          # リモートと差分が無ければコミット不要
          if git diff --quiet -- state.json; then
            echo "state.json equal to remote; skip commit."
            exit 0
          fi

          git add state.json
          git commit -m "chore: update state $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          git push origin "${BRANCH_NAME}"
